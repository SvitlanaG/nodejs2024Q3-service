---
openapi: 3.0.0
paths:
  "/user":
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        description: The user data for creation
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUserDto"
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '400':
          description: Bad request - Missing required fields or invalid data
      summary: Create a new user
      tags:
      - User
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserResponse"
      summary: Get all users
      tags:
      - User
  "/user/{id}":
    get:
      operationId: UserController_findOne
      parameters:
      - name: id
        required: true
        in: path
        description: The user ID
        schema:
          type: string
      responses:
        '200':
          description: User record found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '400':
          description: Invalid user ID format (not a valid UUID)
        '404':
          description: User not found with the given ID
      summary: Get a single user by ID
      tags:
      - User
    put:
      operationId: UserController_update
      parameters:
      - name: id
        required: true
        in: path
        description: The user ID
        schema:
          type: string
      requestBody:
        required: true
        description: The data required to update the password
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePasswordDto"
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
        '400':
          description: Invalid user ID format (not a valid UUID)
        '403':
          description: Incorrect old password
        '404':
          description: User not found with the given ID
      summary: Update user password
      tags:
      - User
    delete:
      operationId: UserController_remove
      parameters:
      - name: id
        required: true
        in: path
        description: The user ID to be deleted
        schema:
          type: string
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid user ID format (not a valid UUID)
        '404':
          description: User not found with the given ID
      summary: Delete a user by ID
      tags:
      - User
  "/track":
    post:
      operationId: TrackController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateTrackDto"
      responses:
        '201':
          description: The track has been successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackResponse"
      summary: Create a new track
      tags:
      - Track
    get:
      operationId: TrackController_findAll
      parameters: []
      responses:
        '200':
          description: Return all track records
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TrackResponse"
      summary: Get all tracks
      tags:
      - Track
  "/track/{id}":
    get:
      operationId: TrackController_findOne
      parameters:
      - name: id
        required: true
        in: path
        description: Track ID
        schema:
          type: string
      responses:
        '200':
          description: The found track record
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackResponse"
        '404':
          description: Track with the specified ID does not exist
      summary: Get a single track by ID
      tags:
      - Track
    put:
      operationId: TrackController_update
      parameters:
      - name: id
        required: true
        in: path
        description: Track ID
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateTrackDto"
      responses:
        '200':
          description: The updated track record
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackResponse"
        '404':
          description: Track with the specified ID does not exist
      summary: Update a track by ID
      tags:
      - Track
    delete:
      operationId: TrackController_remove
      parameters:
      - name: id
        required: true
        in: path
        description: Track ID
        schema:
          type: string
      responses:
        '204':
          description: The track has been successfully deleted
        '404':
          description: Track with the specified ID does not exist
      summary: Delete a track by ID
      tags:
      - Track
  "/album":
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        description: The album data for creation
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateAlbumDto"
      responses:
        '201':
          description: Album successfully created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumResponse"
        '400':
          description: Bad request - Missing required fields or invalid data
      summary: Create a new album
      tags:
      - Album
    get:
      operationId: AlbumController_findAll
      parameters: []
      responses:
        '200':
          description: List of all albums
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AlbumResponse"
      summary: Get all albums
      tags:
      - Album
  "/album/{id}":
    get:
      operationId: AlbumController_findOne
      parameters:
      - name: id
        required: true
        in: path
        description: The album ID
        schema:
          type: string
      responses:
        '200':
          description: Album record found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumResponse"
        '400':
          description: Invalid album ID format (not a valid UUID)
        '404':
          description: Album not found with the given ID
      summary: Get a single album by ID
      tags:
      - Album
    put:
      operationId: AlbumController_update
      parameters:
      - name: id
        required: true
        in: path
        description: The album ID
        schema:
          type: string
      requestBody:
        required: true
        description: The data required to update the album
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateAlbumDto"
      responses:
        '200':
          description: Album updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumResponse"
        '400':
          description: Invalid album ID format (not a valid UUID)
        '404':
          description: Album not found with the given ID
      summary: Update album info
      tags:
      - Album
    delete:
      operationId: AlbumController_remove
      parameters:
      - name: id
        required: true
        in: path
        description: The album ID to be deleted
        schema:
          type: string
      responses:
        '204':
          description: Album successfully deleted
        '400':
          description: Invalid album ID format (not a valid UUID)
        '404':
          description: Album not found with the given ID
      summary: Delete an album by ID
      tags:
      - Album
  "/artist":
    post:
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        description: The artist data for creation
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateArtistDto"
      responses:
        '201':
          description: Artist successfully created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistResponse"
        '400':
          description: Bad request - Missing required fields or invalid data
      summary: Create a new artist
      tags:
      - Artist
    get:
      operationId: ArtistController_findAll
      parameters: []
      responses:
        '200':
          description: List of all artists
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ArtistResponse"
      summary: Get all artists
      tags:
      - Artist
  "/artist/{id}":
    get:
      operationId: ArtistController_findOne
      parameters:
      - name: id
        required: true
        in: path
        description: The artist ID
        schema:
          type: string
      responses:
        '200':
          description: Artist record found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistResponse"
        '400':
          description: Invalid artist ID format (not a valid UUID)
        '404':
          description: Artist not found with the given ID
      summary: Get a single artist by ID
      tags:
      - Artist
    put:
      operationId: ArtistController_update
      parameters:
      - name: id
        required: true
        in: path
        description: The artist ID
        schema:
          type: string
      requestBody:
        required: true
        description: The data required to update the artist
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateArtistDto"
      responses:
        '200':
          description: Artist updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistResponse"
        '400':
          description: Invalid artist ID format (not a valid UUID)
        '404':
          description: Artist not found with the given ID
      summary: Update artist info
      tags:
      - Artist
    delete:
      operationId: ArtistController_remove
      parameters:
      - name: id
        required: true
        in: path
        description: The artist ID to be deleted
        schema:
          type: string
      responses:
        '204':
          description: Artist successfully deleted
        '400':
          description: Invalid artist ID format (not a valid UUID)
        '404':
          description: Artist not found with the given ID
      summary: Delete an artist by ID
      tags:
      - Artist
  "/favs":
    get:
      operationId: FavsController_findAll
      parameters: []
      responses:
        '200':
          description: Successfully retrieved all favorites
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FavoritesResponse"
      summary: Get all favorites, split by entity type
      tags:
      - Favs
  "/favs/track/{id}":
    post:
      operationId: FavsController_addTrack
      parameters:
      - name: id
        required: true
        in: path
        description: Track ID to be added to favorites
        schema:
          type: string
      responses:
        '201':
          description: Track successfully added to favorites
        '400':
          description: Invalid track ID format (not UUID)
        '422':
          description: Track does not exist
      summary: Add a track to favorites
      tags:
      - Favs
    delete:
      operationId: FavsController_removeTrack
      parameters:
      - name: id
        required: true
        in: path
        description: Track ID to be deleted from favorites
        schema:
          type: string
      responses:
        '204':
          description: Track successfully removed from favorites
        '400':
          description: Invalid track ID format (not UUID)
        '404':
          description: Track not found in favorites
      summary: Delete a track from favorites
      tags:
      - Favs
  "/favs/album/{id}":
    post:
      operationId: FavsController_addAlbum
      parameters:
      - name: id
        required: true
        in: path
        description: Album ID to be added to favorites
        schema:
          type: string
      responses:
        '201':
          description: Album successfully added to favorites
        '400':
          description: Invalid album ID format (not UUID)
        '422':
          description: Album does not exist
      summary: Add an album to favorites
      tags:
      - Favs
    delete:
      operationId: FavsController_removeAlbum
      parameters:
      - name: id
        required: true
        in: path
        description: Album ID to be deleted from favorites
        schema:
          type: string
      responses:
        '204':
          description: Album successfully removed from favorites
        '400':
          description: Invalid album ID format (not UUID)
        '404':
          description: Album not found in favorites
      summary: Delete an album from favorites
      tags:
      - Favs
  "/favs/artist/{id}":
    post:
      operationId: FavsController_addArtist
      parameters:
      - name: id
        required: true
        in: path
        description: Artist ID to be added to favorites
        schema:
          type: string
      responses:
        '201':
          description: Artist successfully added to favorites
        '400':
          description: Invalid artist ID format (not UUID)
        '422':
          description: Artist does not exist
      summary: Add an artist to favorites
      tags:
      - Favs
    delete:
      operationId: FavsController_removeArtist
      parameters:
      - name: id
        required: true
        in: path
        description: Artist ID to be deleted from favorites
        schema:
          type: string
      responses:
        '204':
          description: Artist successfully removed from favorites
        '400':
          description: Invalid artist ID format (not UUID)
        '404':
          description: Artist not found in favorites
      summary: Delete an artist from favorites
      tags:
      - Favs
info:
  title: Home Library Service
  description: Home music library service
  version: '1.0'
  contact: {}
tags:
- name: library
  description: ''
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: The login of the user
          example: testUser
        password:
          type: string
          description: Confirm the password
          example: SecurePassword123
      required:
      - login
      - password
    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: The user ID (UUID)
          example: a29bbb80-cb76-4de6-a338-2b7dac4f44a7
        login:
          type: string
          description: The user login
          example: test_user
        version:
          type: number
          description: The user version number
          example: 1
        createdAt:
          type: number
          description: The timestamp when the user was created
          example: 1616870789
        updatedAt:
          type: number
          description: The timestamp when the user was last updated
          example: 1616870889
      required:
      - id
      - login
      - version
      - createdAt
      - updatedAt
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The current password of the user
          example: SecurePassword123
        newPassword:
          type: string
          description: The new password to be set
          example: newSecurePassword456
      required:
      - oldPassword
      - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the track
          example: Remember the Time
        artistId:
          type: string
          description: The ID of the artist associated with this track
          example: be6a7cd6-e191-4758-8d6f-378713735e1d
          nullable: true
        albumId:
          type: string
          description: The ID of the album associated with this track
          example: a26ed444-641e-4b6b-a69e-84c0cb891b30
          nullable: true
        duration:
          type: number
          description: The duration of the track in seconds
          example: 239
      required:
      - name
      - duration
    TrackResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the track
          example: f07b6984-d50a-4820-928a-b67af098ddf4
        name:
          type: string
          description: Name of the track
          example: Remember the Time
        artistId:
          type: string
          description: ID of the artist who performed the track
          example: be6a7cd6-e191-4758-8d6f-378713735e1d
          nullable: true
        albumId:
          type: string
          description: ID of the album where the track belongs
          example: a26ed444-641e-4b6b-a69e-84c0cb891b30
          nullable: true
        duration:
          type: number
          description: Duration of the track in seconds
          example: 240
      required:
      - id
      - name
      - artistId
      - albumId
      - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the track
          example: Updated Track Name
        artistId:
          type: string
          description: The ID of the artist associated with this track
          example: 7192e97c-b453-474a-8c81-ce7ef0789766
          nullable: true
        albumId:
          type: string
          description: The ID of the album associated with this track
          example: 7d8b78d6-52dc-4d90-9b70-bacb07580b22
          nullable: true
        duration:
          type: number
          description: The duration of the track in seconds
          example: 180
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the album
          example: Dangerous
        year:
          type: number
          description: The release year of the album
          example: 1991
        artistId:
          type: string
          description: The ID of the artist who created the album
          example: a0da9b9a-0e4d-4389-8024-29acfe07dba9
          nullable: true
      required:
      - name
      - year
    AlbumResponse:
      type: object
      properties:
        id:
          type: string
          description: The album ID (UUID)
          example: 8f510c98-6c9b-443b-95dc-44723f60650f
        name:
          type: string
          description: The album name
          example: Dangerous
        year:
          type: number
          description: The year the album was released
          example: 1991
        artistId:
          type: string
          description: The artist ID associated with the album
          example: a0da9b9a-0e4d-4389-8024-29acfe07dba9
      required:
      - id
      - name
      - year
      - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the album
        year:
          type: number
          description: The release year of the album
        artistId:
          type: string
          description: The ID of the artist
          nullable: true
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the artist
          example: Michael Jackson
        grammy:
          type: boolean
          description: Indicates if the artist has won a Grammy
          example: true
      required:
      - name
      - grammy
    ArtistResponse:
      type: object
      properties:
        id:
          type: string
          description: The artist ID (UUID)
          example: 8732c98c-c3f6-4996-9015-0df56b73a18d
        name:
          type: string
          description: The name of the artist
          example: Michael Jackson
        grammy:
          type: boolean
          description: Indicates if the artist has won a Grammy
          example: true
      required:
      - id
      - name
      - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the artist
          example: Britney Spears
        grammy:
          type: boolean
          description: Indicates if the artist has won a Grammy
          example: false
    FavoritesResponse:
      type: object
      properties:
        artists:
          description: List of favorite artists
          type: array
          items:
            "$ref": "#/components/schemas/ArtistResponse"
        albums:
          description: List of favorite albums
          type: array
          items:
            "$ref": "#/components/schemas/AlbumResponse"
        tracks:
          description: List of favorite tracks
          type: array
          items:
            "$ref": "#/components/schemas/TrackResponse"
      required:
      - artists
      - albums
      - tracks
